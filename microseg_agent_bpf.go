// Code generated by bpf2go; DO NOT EDIT.

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type microseg_agentNetpolicyRule struct {
	From   [4]uint32
	To     [4]uint32
	Port   uint16
	Action uint16
}

// loadMicroseg_agent returns the embedded CollectionSpec for microseg_agent.
func loadMicroseg_agent() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Microseg_agentBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load microseg_agent: %w", err)
	}

	return spec, err
}

// loadMicroseg_agentObjects loads microseg_agent and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*microseg_agentObjects
//	*microseg_agentPrograms
//	*microseg_agentMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMicroseg_agentObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMicroseg_agent()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// microseg_agentSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type microseg_agentSpecs struct {
	microseg_agentProgramSpecs
	microseg_agentMapSpecs
}

// microseg_agentSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type microseg_agentProgramSpecs struct {
	WlEgress   *ebpf.ProgramSpec `ebpf:"wl_egress"`
	WlIngress  *ebpf.ProgramSpec `ebpf:"wl_ingress"`
	XdpIngress *ebpf.ProgramSpec `ebpf:"xdp_ingress"`
}

// microseg_agentMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type microseg_agentMapSpecs struct {
	NetpolicyRule *ebpf.MapSpec `ebpf:"netpolicy_rule"`
}

// microseg_agentObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMicroseg_agentObjects or ebpf.CollectionSpec.LoadAndAssign.
type microseg_agentObjects struct {
	microseg_agentPrograms
	microseg_agentMaps
}

func (o *microseg_agentObjects) Close() error {
	return _Microseg_agentClose(
		&o.microseg_agentPrograms,
		&o.microseg_agentMaps,
	)
}

// microseg_agentMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMicroseg_agentObjects or ebpf.CollectionSpec.LoadAndAssign.
type microseg_agentMaps struct {
	NetpolicyRule *ebpf.Map `ebpf:"netpolicy_rule"`
}

func (m *microseg_agentMaps) Close() error {
	return _Microseg_agentClose(
		m.NetpolicyRule,
	)
}

// microseg_agentPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMicroseg_agentObjects or ebpf.CollectionSpec.LoadAndAssign.
type microseg_agentPrograms struct {
	WlEgress   *ebpf.Program `ebpf:"wl_egress"`
	WlIngress  *ebpf.Program `ebpf:"wl_ingress"`
	XdpIngress *ebpf.Program `ebpf:"xdp_ingress"`
}

func (p *microseg_agentPrograms) Close() error {
	return _Microseg_agentClose(
		p.WlEgress,
		p.WlIngress,
		p.XdpIngress,
	)
}

func _Microseg_agentClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed microseg_agent_bpf.o
var _Microseg_agentBytes []byte
